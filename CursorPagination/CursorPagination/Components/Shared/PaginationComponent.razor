@typeparam TItem

<div>
    <table class="table table-bordered table-hover table-striped">
        <thead class="table-dark">
            @childContentHeader
        </thead>
        <tbody>
            @foreach (var item in PaginatedData)
            {
                @childContentRow!(item)
            }
        </tbody>
    </table>
    <button type="button"  onclick="@PreviousPage" disabled="@IsPreviousDisabled">Previous</button>
    <button type="button" onclick="@NextPage"  disabled="@(!hasMorePages)">Next</button>
</div>

@code {
    [Parameter] public bool hasMorePages { get; set; } = true;
    [Parameter] public int currentPage { get; set; }
    [Parameter] public EventCallback<int> onPageChanged { get; set; }
    [Parameter] public IEnumerable<TItem>? items { get; set; }
    [Parameter] public RenderFragment? childContentHeader { get; set; }
    [Parameter] public RenderFragment<TItem>? childContentRow { get; set; }
    private bool IsPreviousDisabled => currentPage == 1;
    private int PageSize { get; set; } = 10;
    private IEnumerable<TItem> PaginatedData => items ?? Enumerable.Empty<TItem>();

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            await onPageChanged.InvokeAsync(currentPage - 1);
        }
    }

    private async Task NextPage()
    {
        await onPageChanged.InvokeAsync(currentPage + 1);
    }
}
